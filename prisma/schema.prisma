// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  twwetTicket   Int       @default(1)
  commentTicket Int       @default(1)
  tweets        Tweet[]
  comments      Comment[]

  selecedTopics SelectedTopic[]
  choosenTopic  ChoosenTopic[]
  notifications Notification[]
  likes         Like[]
}

model Tweet {
  id       Int       @id @default(autoincrement())
  text     String
  authorId Int
  time     DateTime  @default(now())
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comments Comment[]
  topics   Topic[]
  likes    Like[]
}

model Comment {
  id       Int      @id @default(autoincrement())
  text     String
  image    String?
  time     DateTime @default(now())
  authorId Int
  tweetId  Int
  tweet    Tweet    @relation(fields: [tweetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  likes    Like[]
}

model Topic {
  id             Int             @id @default(autoincrement())
  avatar         String
  name           String          @unique
  tweets         Tweet[]
  choosenTopic   ChoosenTopic[]
  selectedTopics SelectedTopic[]
}

model SelectedTopic {
  id      Int   @id @default(autoincrement())
  userId  Int
  topicId Int
  topic   Topic @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model ChoosenTopic {
  id      Int   @id @default(autoincrement())
  userId  Int
  topicId Int
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topic   Topic @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Notification {
  id     Int      @id @default(autoincrement())
  text   String
  time   DateTime @default(now())
  userId Int
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  tweetId   Int?
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tweet     Tweet?   @relation(fields: [tweetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
